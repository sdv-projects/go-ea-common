// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryHandler is a mock of QueryHandler interface.
type MockQueryHandler[Q any, R any] struct {
	ctrl     *gomock.Controller
	recorder *MockQueryHandlerMockRecorder[Q, R]
}

// MockQueryHandlerMockRecorder is the mock recorder for MockQueryHandler.
type MockQueryHandlerMockRecorder[Q any, R any] struct {
	mock *MockQueryHandler[Q, R]
}

// NewMockQueryHandler creates a new mock instance.
func NewMockQueryHandler[Q any, R any](ctrl *gomock.Controller) *MockQueryHandler[Q, R] {
	mock := &MockQueryHandler[Q, R]{ctrl: ctrl}
	mock.recorder = &MockQueryHandlerMockRecorder[Q, R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryHandler[Q, R]) EXPECT() *MockQueryHandlerMockRecorder[Q, R] {
	return m.recorder
}

// Handle mocks base method.
func (m *MockQueryHandler[Q, R]) Handle(ctx context.Context, query Q) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockQueryHandlerMockRecorder[Q, R]) Handle(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockQueryHandler[Q, R])(nil).Handle), ctx, query)
}
